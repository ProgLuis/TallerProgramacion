/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package utp.puestoventa;
import javax.swing.JOptionPane;


import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
/**
 *
 * @author Admin
 */
public class NuevoProducto extends javax.swing.JFrame {

    /**
     * Creates new form NuevoProducto
     */
    public NuevoProducto() {
        initComponents();
        CargarListaCategoriasProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CmbCategoriaProducto = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        TxtID = new javax.swing.JTextField();
        TxtNombreProducto = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        DateChooserFechaVencimiento = new com.toedter.calendar.JDateChooser();
        TxtMedidaProducto = new javax.swing.JTextField();
        SpinPrecio = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        TxtProveedor = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        BtnGuardar = new javax.swing.JButton();
        BtnCancelarSalir = new javax.swing.JButton();
        SpinStock = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ID:");

        jLabel2.setText("Nombre producto");

        CmbCategoriaProducto.setModel(new javax.swing.DefaultComboBoxModel<>());

        jLabel3.setText("Categoria");

        TxtID.setEditable(false);

        jLabel4.setText("Medida");

        jLabel5.setText("Precio");

        jLabel6.setText("Fecha vencimiento");

        SpinPrecio.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 10000.0d, 0.1d));

        jLabel7.setText("Stock");

        jLabel8.setText("Proveedor");

        BtnGuardar.setText("Guardar");
        BtnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnGuardarActionPerformed(evt);
            }
        });

        BtnCancelarSalir.setText("Cancelar/Salir");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addComponent(TxtNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SpinPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TxtProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TxtID, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TxtMedidaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(SpinStock, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(DateChooserFechaVencimiento, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(CmbCategoriaProducto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(BtnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(BtnCancelarSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TxtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TxtNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(CmbCategoriaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(TxtMedidaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(SpinPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DateChooserFechaVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(SpinStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnCancelarSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnGuardarActionPerformed
        // TODO add your handling code here:
        
        if (validarCampos()){
            guardarDatos();
        }
        else {
        }
    }//GEN-LAST:event_BtnGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NuevoProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NuevoProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NuevoProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NuevoProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NuevoProducto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCancelarSalir;
    private javax.swing.JButton BtnGuardar;    
    private javax.swing.JComboBox<CategoriasProductos> CmbCategoriaProducto;
    private com.toedter.calendar.JDateChooser DateChooserFechaVencimiento;
    private javax.swing.JSpinner SpinPrecio;
    private javax.swing.JSpinner SpinStock;
    private javax.swing.JTextField TxtID;
    private javax.swing.JTextField TxtMedidaProducto;
    private javax.swing.JTextField TxtNombreProducto;
    private javax.swing.JTextField TxtProveedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    // End of variables declaration//GEN-END:variables
public void CargarListaCategoriasProductos() {
    ServicioListaCategoriaProducto servicioCategoria = new ServicioListaCategoriaProducto();
    List<CategoriasProductos> listaCategorias = servicioCategoria.obtenerCategorias();

    // Crear un modelo personalizado para el combo box
    DefaultComboBoxModel<CategoriasProductos> modeloCategorias = new DefaultComboBoxModel<>();

    // Poblar el modelo con objetos CategoriasProductos
    if (listaCategorias != null && !listaCategorias.isEmpty()) {
        for (CategoriasProductos categoria : listaCategorias) {
            modeloCategorias.addElement(categoria);
        }
    } else {
        modeloCategorias.addElement(new CategoriasProductos(-1, "Sin categorías disponibles"));
    }

    // Forzar el modelo del combo box para que acepte CategoriasProductos
    CmbCategoriaProducto.setModel(modeloCategorias);
}


private int obtenerIdCategoriaSeleccionada() {
    CategoriasProductos categoriaSeleccionada = (CategoriasProductos) CmbCategoriaProducto.getSelectedItem();
    if (categoriaSeleccionada != null) {
        return categoriaSeleccionada.getId();
    }
    return -1; // Retorna -1 si no hay una selección válida
}

private boolean validarCampos() {
    String mensajeError = "";

    // Validar el nombre del producto
    if (TxtNombreProducto.getText().trim().isEmpty()) {
        mensajeError += "- El campo 'Nombre de Producto' es obligatorio.\n";
    }

    // Validar la categoría
    if (CmbCategoriaProducto.getSelectedItem() == null || CmbCategoriaProducto.getSelectedItem().toString().equals("Sin categorías disponibles")) {
        mensajeError += "- Debes seleccionar una categoría válida.\n";
    }

    // Validar la medida
    if (TxtMedidaProducto.getText().trim().isEmpty()) {
        mensajeError += "- El campo 'Medida' es obligatorio.\n";
    }

    // Validar el precio
    try {
        double precio = Double.parseDouble(SpinPrecio.getValue().toString());
        if (precio <= 0) {
            mensajeError += "- El precio debe ser mayor a 0.\n";
        }
    } catch (NumberFormatException e) {
        mensajeError += "- El precio debe ser un número válido.\n";
    }

    // Validar la fecha de vencimiento
    if (DateChooserFechaVencimiento.getDate() == null) {
        mensajeError += "- Debes seleccionar una fecha de vencimiento válida.\n";
    }

    // Validar el stock
    try {
        int stock = Integer.parseInt(SpinStock.getValue().toString());
        if (stock < 0) {
            mensajeError += "- El stock no puede ser negativo.\n";
        }
    } catch (NumberFormatException e) {
        mensajeError += "- El stock debe ser un número entero válido.\n";
    }

    // Validar el proveedor
    if (TxtProveedor.getText().trim().isEmpty()) {
        mensajeError += "- El campo 'Proveedor' es obligatorio.\n";
    }

    // Mostrar errores si hay
    if (!mensajeError.isEmpty()) {
        JOptionPane.showMessageDialog(this, mensajeError, "Validación de Campos", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    // Si todos los campos son válidos
    return true;
}

    private void guardarDatos() {
    int idCategoria = obtenerIdCategoriaSeleccionada();
    if (idCategoria == -1) {
        JOptionPane.showMessageDialog(this, "No se ha seleccionado una categoría válida.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Configurar conexión al servidor
        URL url = new URL("https://example.com/api/guardarnuevoproducto.php"); // Cambia la URL al servidor real
        HttpURLConnection conexion = (HttpURLConnection) url.openConnection();
        conexion.setRequestMethod("POST");
        conexion.setRequestProperty("Content-Type", "application/json");
        conexion.setDoOutput(true);

        // Crear el JSON con el ID de la categoría
        String datos = "{\"idCategoria\":" + idCategoria + "}";
        try (OutputStream os = conexion.getOutputStream()) {
            os.write(datos.getBytes());
            os.flush();
        }

        // Leer la respuesta del servidor
        if (conexion.getResponseCode() == HttpURLConnection.HTTP_OK) {
            String respuesta = new String(conexion.getInputStream().readAllBytes());
            JOptionPane.showMessageDialog(this, "Respuesta del servidor: " + respuesta, "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Error al enviar la categoría: Código " + conexion.getResponseCode(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al conectar con el servidor: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }
}
